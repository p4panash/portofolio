name: Playwright Tests

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # Split tests across 3 shards for parallel execution
        shard: [1, 2, 3]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      # Cache Playwright browsers to speed up installation
      - name: Cache Playwright browsers
        id: playwright-cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            playwright-${{ runner.os }}-

      - name: Install Playwright Chromium browser
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: pnpm exec playwright install chromium --with-deps

      - name: Install Playwright system dependencies only
        if: steps.playwright-cache.outputs.cache-hit == 'true'
        run: pnpm exec playwright install-deps chromium

      - name: Build application
        env:
          PUBLIC_MAPBOX_TOKEN: ${{ secrets.PUBLIC_MAPBOX_TOKEN }}
        run: pnpm run build

      - name: Run Playwright tests (shard ${{ matrix.shard }}/3)
        run: pnpm exec playwright test --project=chromium --shard=${{ matrix.shard }}/3

      - name: Upload blob report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: blob-report-${{ matrix.shard }}
          path: blob-report/
          retention-days: 30

      - name: Upload coverage data
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-${{ matrix.shard }}
          path: .nyc_output/
          retention-days: 30

      - name: Upload screenshots and videos
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-screenshots-${{ matrix.shard }}
          path: |
            test-results/
          retention-days: 30

  # Merge reports from all shards into a single report
  merge-reports:
    if: always()
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Download all blob reports
        uses: actions/download-artifact@v4
        with:
          path: all-blob-reports/
          pattern: blob-report-*

      - name: Merge reports into HTML and JSON
        run: |
          # Merge all blob reports - each artifact is in its own subdirectory
          mkdir -p merged-blob-reports
          for report in all-blob-reports/blob-report-*/report-*.zip; do
            cp "$report" merged-blob-reports/
          done

          # Merge with HTML reporter (creates playwright-report/)
          pnpm exec playwright merge-reports --reporter html ./merged-blob-reports

          # Also generate JSON report
          pnpm exec playwright merge-reports --reporter json ./merged-blob-reports > playwright-report/results.json

          # Verify output
          echo "Merged report contents:"
          ls -la playwright-report/

      - name: Upload merged report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-merged
          path: playwright-report/
          retention-days: 30

      - name: Comment PR with test results
        uses: daun/playwright-report-comment@v3
        if: always() && github.event_name == 'pull_request'
        with:
          report-file: playwright-report/results.json

      - name: Add artifact links to PR comment
        if: always() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const runId = context.runId;
            const repo = context.repo;
            const artifactUrl = `https://github.com/${repo.owner}/${repo.repo}/actions/runs/${runId}`;

            const comment = `### 📸 Test Artifacts & Screenshots

            - 📊 **[View Full HTML Report](${artifactUrl}#artifacts)** - Download \`playwright-report-merged\` artifact
            - 🖼️ **[Screenshots & Videos](${artifactUrl}#artifacts)** - Download \`playwright-screenshots-*\` artifacts

            💡 **To view detailed results with screenshots:**
            1. Download the \`playwright-report-merged\` artifact
            2. Extract and open \`index.html\` in your browser
            3. Click on failed tests to see screenshots, diffs, and traces
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: repo.owner,
              repo: repo.repo,
              body: comment
            });

  # Generate code coverage report (only on main branch)
  coverage-report:
    if: always() && github.ref == 'refs/heads/main'
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Download all coverage reports
        uses: actions/download-artifact@v4
        with:
          path: all-coverage/
          pattern: coverage-*

      - name: Merge coverage reports
        run: |
          # Create .nyc_output directory
          mkdir -p .nyc_output

          # Copy all coverage files to .nyc_output
          for coverage_dir in all-coverage/coverage-*; do
            if [ -d "$coverage_dir" ]; then
              cp "$coverage_dir"/*.json .nyc_output/ 2>/dev/null || true
            fi
          done

          # Generate coverage report
          pnpm exec nyc report --reporter=lcov --reporter=text --reporter=json-summary

          # Display coverage summary
          if [ -f coverage/coverage-summary.json ]; then
            cat coverage/coverage-summary.json
          fi

      - name: Create coverage badge
        run: |
          # Extract coverage percentage
          COVERAGE=$(node -e "const data = require('./coverage/coverage-summary.json'); console.log(data.total.lines.pct.toFixed(2));")
          echo "Coverage: $COVERAGE%"

          # Determine badge color
          if (( $(echo "$COVERAGE >= 80" | bc -l) )); then
            COLOR="brightgreen"
          elif (( $(echo "$COVERAGE >= 60" | bc -l) )); then
            COLOR="yellow"
          else
            COLOR="red"
          fi

          # Create coverage badge JSON for shields.io endpoint
          mkdir -p .github/badges
          cat > .github/badges/coverage.json <<EOF
          {
            "schemaVersion": 1,
            "label": "coverage",
            "message": "${COVERAGE}%",
            "color": "${COLOR}"
          }
          EOF

          cat .github/badges/coverage.json

      - name: Commit coverage badge
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .github/badges/coverage.json
          git diff --staged --quiet || git commit -m "Update coverage badge [skip ci]"
          git push || echo "No changes to push"

      - name: Upload coverage report artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: coverage/
          retention-days: 30
